let CACHE = 'cache-sw-{{ alias }}-{{ version }}';
let debug = {% if debug|default(false) %}true{% else %}false{% endif %};
let pageTitle = '{{ pageTitle }}';
let startUrl = '{{ startUrl|default('/') }}';

{% block install %}
self.addEventListener('install', function(e) {
    if (debug) console.log('[Serviceworker] Install event');
    {% block install_inner %}

    {% endblock %}
});
{% endblock %}

{% block activate %}
self.addEventListener('activate', function(event) {
    if (debug) console.log('[Serviceworker] Activate event!');
    {% block activate_inner %}
        event.waitUntil(self.clients.claim());
    {% endblock %}
});
{% endblock %}

{% block fetch %}
self.addEventListener('fetch', function(event) {
    if (debug) console.log('[Serviceworker] Fetch ' + event.request.url);
    {% block fetch_filter %}
        var url = new URL(event.request.url);

        // don't cache backend or dev routes
        if (url.pathname.match('^\/contao')
            || url.pathname.match('^\/_contao')
            || url.pathname.match('^\/app_dev.php')
            || url.pathname.match('^\/api')
        ) {
            if (debug) console.log('[Serviceworker] Fetch: Stop (' + event.request.url + ')');
            return false;
        }
    {% endblock %}
    {% block fetch_inner %}
        event.respondWith(
            fetch(event.request).catch(function(error) {
                useFallback();
            }
        ));
    {% endblock %}
});
{% endblock %}

{% block push %}
self.addEventListener('push', function(event) {
    {% block push_inner %}
    let payload = event.data ? event.data.text() : false;
    if (false === payload)
    {
        if (debug) console.log('[Serviceworker] Push: A push notification sent from ' + pageTitle + ' without any content.');
        return;
    }
    if (debug) console.log("[Serviceworker] Push: Payload: ", payload);
    payload = JSON.parse(payload);

    event.waitUntil(
        self.registration.showNotification(pageTitle, payload)
    );
    {% endblock %}
});
{% endblock %}

{% block noticiationclick %}
self.addEventListener('notificationclick', function(event) {
    if (debug) console.log("[Serviceworker] Notificationclick event ");
    if (event.notification.data.clickJumpTo !== undefined)
    {
        event.notification.close();
        event.waitUntil(
            clients.openWindow(event.notification.data.clickJumpTo)
        );
    }
});
{% endblock %}


{% block fallback %}
const FALLBACK =
    '<svg xmlns="http://www.w3.org/2000/svg" width="200" height="180" stroke-linejoin="round">' +
    '  <path stroke="#DDD" stroke-width="25" d="M99,18 15,162H183z"/>' +
    '  <path stroke-width="17" fill="#FFF" d="M99,18 15,162H183z" stroke="#eee"/>' +
    '  <path d="M91,70a9,9 0 0,1 18,0l-5,50a4,4 0 0,1-8,0z" fill="#aaa"/>' +
    '  <circle cy="138" r="9" cx="100" fill="#aaa"/>' +
    '</svg>';

function useFallback() {
    if (debug) console.log('[Serviceworker] Fetch: Use Fallback');
    return Promise.resolve(new Response(FALLBACK, { headers: {
            'Content-Type': 'image/svg+xml'
        }}));
}
{% endblock %}