{% block config_variables %}
    const VERSION = '{{ alias }}-{{ version }}';
    const CACHE = 'cache-sw-' + VERSION;
    let startUrl = '{{ startUrl|default('/') }}';
    let offlinePage = '{{ offlinePage|default('') }}';
{% endblock %}

self.importScripts('{{ serviceworkerClass|default() }}');

{% block configuration %}
let SW = new HuhPwaServiceWorker();
SW.offlinePage = offlinePage;
SW.debug = {% if debug|default(false) %}true{% else %}false{% endif %};
SW.pageTitle = '{{ pageTitle }}';
SW.supportOfflineCaching = false;
SW.startUrl = startUrl;
SW.cache = CACHE;
SW.updateSubscriptionPath = '{{ updateSubscriptionPath }}';
{% endblock %}

self.addEventListener('install', function (event) {
    SW.log(event, 'Start install event');
    event.waitUntil(SW.installEvent(event).then(self.skipWaiting()));
});

{% block activate %}
self.addEventListener('activate', function(event) {
    SW.log(event, 'Start activate event');

    event.waitUntil(
        caches.keys().then(function(cacheNames) {
            return Promise.all(
                cacheNames.map(function(cacheName) {
                    if (cacheName !== CACHE) {
                        SW.log(event, 'Deleting old cache:' + cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        }).then(function() {
            SW.log(event, "Claiming clients for ServiceWorker " + VERSION);
            return self.clients.claim();
        })
    );
});
{% endblock %}

{% block fetch %}
self.addEventListener('fetch', function(event) {
    SW.log(event, 'Fetch ' + event.request.url);
    {% block fetch_filter %}

        if (event.request.method !== 'GET') {
            SW.log(event, 'POST requests are not handled by the service worker');
            return event.respondWith(fetch(event.request));
        }
        var url = new URL(event.request.url);

        // don't cache backend or dev routes
        if (url.pathname.match('^\/contao')
            || url.pathname.match('^\/_contao')
            || url.pathname.match('^\/app_dev.php')
            || url.pathname.match('^\/api')
        ) {
            SW.log(event, '[Serviceworker] Fetch: Stop (' + event.request.url + ')');
            return false;
        }
    {% endblock %}
    {% block fetch_inner %}
        event.respondWith(
            fetch(event.request)
        );
    {% endblock %}
});
{% endblock %}

{% block push %}
self.addEventListener('push', /** @param {PushEvent} event */ function(event) {
    {% block push_inner %}
    let payload = event.data ? event.data.text() : false;
    if (false === payload)
    {
        SW.log(event, 'A push notification sent from ' + SW.pageTitle + ' without any content.');
        return;
    }
    SW.log(event, 'Push payload: ' + payload);
    payload = JSON.parse(payload);

    event.waitUntil(
        self.registration.showNotification(SW.notificationTitle(payload), payload)
    );
    {% endblock %}
});
{% endblock %}

{% block pushsubscriptionchange %}
self.addEventListener('pushsubscriptionchange', /** @param {PushSubscriptionChangeEvent} event */ function(event) {
    SW.log(event, 'Start event');
    event.waitUntil(SW.pushSubscriptionChangeEvent(event, self));
});
{% endblock %}

{% block noticiationclick %}
self.addEventListener('notificationclick', function(event) {
    SW.log(event, 'Start notification clicked event');
    if (event.notification.data.clickJumpTo !== undefined)
    {
        event.notification.close();
        event.waitUntil(
            clients.openWindow(event.notification.data.clickJumpTo)
        );
    }
});
{% endblock %}