{% block config_variables %}
    let CACHE = 'cache-sw-{{ alias }}-{{ version }}';
    let startUrl = '{{ startUrl|default('/') }}';
    let offlinePage = '{{ offlinePage|default('') }}';
{% endblock %}

class HuhPwaServiceWorker
{
    constructor() {
        this.offlinePage = '';
        this.debug = false;
        this.pageTitle = '';
    }

    returnFromCache(request)
    {
        return caches.open(CACHE).then((cache) => {
            return cache.match(request).then((matching) => {
                if (!matching || matching.status == 404)
                {
                    return this.offlineFallback(cache);
                }
                return matching;
            });
        });
    }

    offlineFallback(cache) {
        if (this.offlinePage != '')
        {
            return cache.match(this.offlinePage);
        }
        return Promise.reject('no-match');
    }

    notificationTitle(payload)
    {
        let title = this.pageTitle;
        if (typeof payload.title === 'string')
        {
            title = payload.title;
        }
        return title;
    }

    log(event, message) {
        if (this.debug) console.log('[Serviceworker ' + event.type + ' event] ' + message);
    }
}

{% block configuration %}
let SW = new HuhPwaServiceWorker();
SW.offlinePage = offlinePage;
SW.debug = {% if debug|default(false) %}true{% else %}false{% endif %};
SW.pageTitle = '{{ pageTitle }}';
{% endblock %}

{% block install %}
self.addEventListener('install', function(event) {
    SW.log(event, 'Start install event');
    e.waitUntil(
        self.skipWaiting()
    );
});
{% endblock %}

{% block activate %}
self.addEventListener('activate', function(event) {
    SW.log(event, 'Start activate event');
    {% block activate_inner %}
    event.waitUntil(
        self.clients.claim().then(function() {
            caches.open(CACHE).then(function(cache) {
                // Delete old caches
                caches.keys().then(function(names) {
                    return Promise.all(names.filter(function(name) {
                        return name !== CACHE;
                    }).map(function(name) {
                        return caches.delete(name)
                    }))
                })
            })
        })
    );
    {% endblock %}
});
{% endblock %}

{% block fetch %}
self.addEventListener('fetch', function(event) {
    SW.log(event, 'Fetch ' + event.request.url);
    {% block fetch_filter %}

        if (event.request.method !== 'GET') {
            SW.log(event, 'POST requests are not handled by the service worker');
            return event.respondWith(fetch(event.request));
        }
        var url = new URL(event.request.url);

        // don't cache backend or dev routes
        if (url.pathname.match('^\/contao')
            || url.pathname.match('^\/_contao')
            || url.pathname.match('^\/app_dev.php')
            || url.pathname.match('^\/api')
        ) {
            SW.log(event, '[Serviceworker] Fetch: Stop (' + event.request.url + ')');
            return false;
        }
    {% endblock %}
    {% block fetch_inner %}
        event.respondWith(
            fetch(event.request)
        );
    {% endblock %}
});
{% endblock %}

{% block push %}
self.addEventListener('push', /** @param {PushEvent} event */ function(event) {
    {% block push_inner %}
    let payload = event.data ? event.data.text() : false;
    if (false === payload)
    {
        SW.log(event, 'A push notification sent from ' + SW.pageTitle + ' without any content.');
        return;
    }
    SW.log(event, 'Push payload: ' + payload);
    payload = JSON.parse(payload);

    event.waitUntil(
        self.registration.showNotification(SW.notificationTitle(payload), payload)
    );
    {% endblock %}
});
{% endblock %}

{#{% block pushsubscriptionchange %}#}
{#self.addEventListener('pushsubscriptionchange', /** @param {PushSubscriptionChangeEvent} event */ function(event) {#}
    {#SW.log(event, 'Start event');#}
    {#event.waitUntil(#}
        {#self.registration.pushManager.subscribe(e.oldSubscription.options)#}
        {#.then(function(subscription) {#}
            {##}
        {#})#}
    {#);#}
{#});#}
{#{% endblock %}#}

{% block noticiationclick %}
self.addEventListener('notificationclick', function(event) {
    SW.log(event, 'Start notification clicked event');
    if (event.notification.data.clickJumpTo !== undefined)
    {
        event.notification.close();
        event.waitUntil(
            clients.openWindow(event.notification.data.clickJumpTo)
        );
    }
});
{% endblock %}