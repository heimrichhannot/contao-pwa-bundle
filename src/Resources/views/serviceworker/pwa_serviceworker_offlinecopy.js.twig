{% extends "@HeimrichHannotContaoPwa/serviceworker/pwa_serviceworker_default.js.twig" %}

{% block install %}
self.addEventListener('install', function(event) {
    if (debug) console.log('[Serviceworker] Install event');
    event.waitUntil(preLoad().then(self.skipWaiting()));

    function preLoad(){
        return caches.open(CACHE).then(function(cache) {
            let files = [startUrl, offlinePage];
            {% block preload_files %}
            {% endblock %}
            console.log('[Serviceworker] Install: Precache file list', files);
            return cache.addAll(files);
        });
    }
});
{% endblock %}

{% block fetch_inner %}
    event.respondWith(checkResponse(event.request).catch(function() {
        return returnFromCache(event.request)}
    ));
    event.waitUntil(addToCache(event.request));

    function checkResponse(request){
        return new Promise(function(fulfill, reject) {
            fetch(request).then(function(response){
                if(response.status !== 404) {
                    fulfill(response)
                } else {
                    reject()
                }
            }, reject)
        });
    }

    function addToCache(request){
        return caches.open(CACHE).then(function (cache) {
            return fetch(request).then(function (response) {
                if (debug) console.log('[Serviceworker] Fetch: add page to offline '+response.url)
                return cache.put(request, response);
            });
        });
    }

    function returnFromCache(request)
    {
        //Check to see if you have it in the cache
        //Return response
        //If not in the cache, then return error page
        return caches.open(CACHE).then(function (cache) {
            return cache.match(request).then(function (matching) {
                if (!matching || matching.status == 404)
                {
                    if (offlinePage != '')
                    {
                        return cache.match(offlinePage);
                    }
                    return Promise.reject('no-match');
                }
                return matching;
            });
        });
    }
{% endblock %}