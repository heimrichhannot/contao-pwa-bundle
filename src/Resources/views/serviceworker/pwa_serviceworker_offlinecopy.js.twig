{% extends "@HeimrichHannotContaoPwa/serviceworker/pwa_serviceworker_default.js.twig" %}

{% block install %}
self.addEventListener('install', function(event) {
    SW.log(event, 'Start install event');
    event.waitUntil(preLoad().then(self.skipWaiting()));

    function preLoad(){
        return caches.open(CACHE).then(function(cache) {
            let files = [startUrl, offlinePage];
            {% block preload_files %}
            {% endblock %}
            SW.log(event, 'Precache file list', files);
            return cache.addAll(files);
        });
    }
});
{% endblock %}

{% block fetch_inner %}
    event.respondWith(
        fetch(event.request)
        .then(function(responce) {
            let cacheCopy = responce.clone();
            caches.open(CACHE)
                .then(function (cache) {
                    cache.put(event.request, cacheCopy);
                })
                .then(function() {
                    SW.log(event, 'Added request to cache:' + event.request.url);
                });
            return responce;
        })
        .catch(function(error) {
            SW.log(event, 'Could not fetch resource, try to return from cache: ' + event.request.url)
            return returnFromCache(event.request);
        })
    );


    function returnFromCache(request)
    {
        return caches.open(CACHE).then(function (cache) {
            return cache.match(request).then(function (matching) {
                if (!matching || matching.status == 404)
                {
                    return SW.offlineFallback();
                }
                return matching;
            });
        });
    }


    
    function returnOfflineFallback() {
        return new Promise
    }
{% endblock %}