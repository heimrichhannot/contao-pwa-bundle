{% extends "@HeimrichHannotContaoPwa/serviceworker/pwa_serviceworker_default.js.twig" %}

{% block install_inner %}
    e.waitUntil(
        caches.open(CACHE).then(function(cache) {
            if (debug) console.log('[Serviceworker] Install: Cache open');
            // Delete old caches
            caches.keys().then(function(names) {
                return Promise.all(names.filter(function(name) {
                    return name !== CACHE;
                }).map(function(name) {
                    return caches.delete(name)
                }))
            })
        })
        .then(function() {
            if (debug) console.log('[Serviceworker] Install: Skip waiting');
            return self.skipWaiting();
        })
    )
{% endblock %}

{% block fetch_inner %}
    var updateCache = function(request){
        return caches.open(CACHE).then(function (cache) {
            return fetch(request).then(function (response) {
                if (debug) console.log('[Serviceworker] Fetch: add page to offline '+response.url)
                return cache.put(request, response);
            });
        });
    };

    event.waitUntil(updateCache(event.request));

    event.respondWith(
        fetch(event.request).catch(function(error) {
            if (debug) console.log( '[Serviceworker] Fetch: Network request Failed. Serving content from cache: ' + error );

            //Check to see if you have it in the cache
            //Return response
            //If not in the cache, then return error page
            return caches.open(CACHE).then(function (cache) {
                return cache.match(event.request).then(function (matching) {
                    
                    var report =  !matching || matching.status == 404?Promise.reject('no-match'): matching;
                    return report
                });
            });
        })
    );
{% endblock %}